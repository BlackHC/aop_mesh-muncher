basicLightingFunction:
	module

	uniforms:
		viewerPosition		vec3
		
	code::
		float getDiffuseAttenuation( const vec3 normal, const vec3 lightDirection ) {
			return abs( dot( normal, lightDirection ) );
		}

		float getSpecularAttenuation( const vec3 position, const vec3 normal, const vec3 lightDirection ) {
			const vec3 viewerDirection = normalize( viewerPosition - position );
			const vec3 halfVector = normalize( viewerDirection + lightDirection );

			return abs( dot( halfVector, normal ) );
		}

sceneLighting:
	module

	dependencies:
		basicLightingFunction
	
	uniforms:
		sunShadowTexture	'layout( binding = 1 ) sampler2D'
		sunShadowProjection	mat4

	code::
		float shadowMapLookUp( sampler2D shadowMap, const mat4 lightProjectionMatrix, const vec3 worldPosition, const vec3 worldNormal ) {
			const vec4 transformedPosition = lightProjectionMatrix * vec4( worldPosition, 1.0 );

			// clip again
			if( transformedPosition.z < -transformedPosition.w ) {
				return 0.0;
			}
			// normalize the transformed position into clipping space coordinates
			const vec3 clippedPosition = transformedPosition.xyz / transformedPosition.w;
			const vec3 viewportPosition = (clippedPosition + 1.0) * 0.5;
						
			vec4 refDepth4 = textureGather( shadowMap, viewportPosition.xy );
			//return refDepth4.x;
			if( any( greaterThan( refDepth4, vec4( viewportPosition.z * 0.995 ) ) ) ) {
				return 1.0;
			}
			else {
				return 0.0;
			}
			//return clamp( pow( 1.0 + refDepth - viewportCoords.z, 0.3 ), 0.0, 1.0 );
		}

		vec3 lightFragment( const vec3 position, const vec3 normal, const vec3 diffuseColor ) {
			// from position to light
			const vec3 lightDirection = normalize( vec3( 0.0, 1.0, 1.0 ) );
			const float diffuseAttenuation = getDiffuseAttenuation( normal, lightDirection ) * 0.8;
			const float specularAttenuation = pow( getSpecularAttenuation( position, normal, lightDirection ), 18 );

			const float ambientAttenuation = 0.2;
			const float shadowMapAttenuation = shadowMapLookUp( sunShadowTexture, sunShadowProjection, position, normal );

			//return vec3( shadowMapAttenuation );
			return diffuseColor * (ambientAttenuation +  (1.0 - ambientAttenuation) * shadowMapAttenuation * (diffuseAttenuation + specularAttenuation));
		}

previewLighting:
	module

	dependencies:
		basicLightingFunction

	code::
		vec3 lightFragment( const vec3 position, const vec3 normal, const vec3 diffuseColor ) {
			// from position to light
			const vec3 lightDirection = normalize( vec3( 0.0, 1.0, 1.0 ) );
			const float diffuseAttenuation = getDiffuseAttenuation( normal, lightDirection ) * 0.8;
			const float specularAttenuation = pow( getSpecularAttenuation( position, normal, lightDirection ), 18 );

			// make it bright
			const float ambientAttenuation = 0.5;
			
			return diffuseColor * (ambientAttenuation +  (1.0 - ambientAttenuation) * (diffuseAttenuation + specularAttenuation));
		}

terrain:
	surfaceShader

	dependencies:
		sceneLighting

	uniforms:
		terrainTexture 'layout( binding = 0 ) sampler2D'

	inputs:
		worldPosition	vec3
		worldNormal		vec3

	code::
		vec4 surfaceShader() {
			vec3 terrainColor = texture( terrainTexture, gl_TexCoord[0].st ).rgb;

			// add some very simple lighting
			vec3 color = lightFragment( worldPosition, worldNormal, terrainColor );
			return vec4( color, 1.0 );
		}

object:
	surfaceShader

	dependencies:
		sceneLighting

	inputs:
		worldPosition	vec3
		worldNormal		vec3
		vertexColor		vec4

	uniforms:
		baseTetxture 'layout( binding = 0 ) sampler2D'

	code::
		vec4 surfaceShader() {
			vec4 baseColor = vertexColor * texture( baseTetxture, gl_TexCoord[0].st );

			// add some very simple lighting
			vec3 color = lightFragment( worldPosition, worldNormal, baseColor.rgb );
			return vec4( color, baseColor.a );
		}

previewObject:
	surfaceShader

	dependencies:
		previewLighting

	inputs:
		worldPosition	vec3
		worldNormal		vec3
		vertexColor		vec4

	uniforms:
		baseTexture 'layout( binding = 0 ) sampler2D'

	code::
		vec4 surfaceShader() {
				//return vec4( worldNormal / 2 + 0.5, 1.0 );
			vec4 baseColor = vertexColor * texture( baseTexture, gl_TexCoord[0].st );

			// add some very simple lighting
			vec3 color = lightFragment( worldPosition, normalize( worldNormal ), baseColor.rgb );
			return vec4( color, baseColor.a );
		}

previewObjectNormals:
	surfaceShader

	inputs:
		worldPosition	vec3
		worldNormal		vec3

	code::
		vec4 surfaceShader() {
			return vec4( worldNormal / 2 + 0.5, 1.0 );
		}

sgsMesh:
	vertexShader

	dependencies:
		sceneLighting

	outputs:
		worldPosition	vec3
		worldNormal		vec3
		vertexColor		vec4

	code::
		void vertexShader() {
			worldPosition = (gl_ModelViewMatrix * gl_Vertex).xyz;
			worldNormal = mat3(gl_ModelViewMatrix) * gl_Normal;
			vertexColor = gl_Color;
			gl_Position = ftransform();
			gl_TexCoord[0] = gl_MultiTexCoord0;
		}

shadowMapSurface:
	surfaceShader

	uniforms:
		baseTexture 'layout( binding = 0 ) sampler2D'

	code::
		vec4 surfaceShader() {
			float alpha = texture( baseTexture, gl_TexCoord[0].st ).a;
			if( alpha < 0.5 ) {
				discard;
			}
			return vec4( 1.0 );
		}

shadowMapMesh:
	vertexShader

	code::
		void vertexShader() {
			gl_TexCoord[0] = gl_MultiTexCoord0;
			gl_Position = ftransform();
		}

